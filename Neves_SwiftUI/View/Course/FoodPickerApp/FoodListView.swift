//
//  FoodListView.swift
//  Neves_SwiftUI
//
//  Created by Âë®ÂÅ•Âπ≥ on 2023/7/9.
//

import SwiftUI

struct FoodListView: View {
    @Environment(\.editMode) var editMode
    @Environment(\.dynamicTypeSize) var textSize
    @State private var foods = Food.examples
    @State private var selectedFoods = Set<Food.ID>()
    @State private var isShowDetail = false
    @State private var detailHeight: CGFloat = DetailSheetHeightKey.defaultValue
    
    // ÊòØÂê¶Ê≠£Âú®ÁºñËæë
    var isEditing: Bool { editMode?.wrappedValue == .active }
    
    var body: some View {
        VStack(alignment: .leading) {
            titleBar
            
            List($foods, editActions: .all, selection: $selectedFoods) { $food in
                HStack {
                    Text(food.name)
                        .padding(.vertical, 10)
                        // =========== ÁªôÊï¥Ë°åÊ∑ªÂä†ÁÇπÂáª‰∫ã‰ª∂ ===========
                        // üì¢ Ê≥®ÊÑèÔºöÂ¶ÇÊûúÁõ¥Êé•Ê∑ªÂä†`onTapGesture`ÔºåÈÇ£ÂìçÂ∫îËåÉÂõ¥Â∞±Âè™Êúâ„ÄêÊñáÊú¨„ÄëÁöÑËåÉÂõ¥ÔºåËß£ÂÜ≥ÊñπÊ≥ïÔºö
                        // 1.Êää`Text`ÁöÑËåÉÂõ¥ÊãâÂà∞ÊúÄÂ§ß
                        .frame(maxWidth: .infinity, alignment: .leading)
                        // Âè™ÊääËåÉÂõ¥ÊãâÂ§ß‰πüÊòØÊó†Ê≥ïÂìçÂ∫îÔºåÂõ†‰∏∫Èô§ÊñáÊú¨‰ª•Â§ñÁöÑÂú∞ÊñπÂ∞±Âè™ÊòØ‰∏Ä‰∏™Á©∫Èó¥ÔºåÂπ∂‰∏çÊòØ‰∏™ÂÆû‰Ωì
                        // 2.‰∏∫‰∫ÜËÉΩËÆ©ÂÖ∂‰ΩôÂú∞Êñπ‰πüËÉΩË¢´ÁÇπÂáªÔºåËøòÂæóÂº∫Âà∂ÊîæÂÖ•‰∏Ä‰∏™ÊòéÁ°ÆÂÆö‰πâÁöÑ„ÄÅÂèØ‰ª•ÁÇπÂáªÁöÑÂΩ¢Áä∂
                        .contentShape(Rectangle()) // contentShape: Defines the content shape for hit testing.
                        // ÊîæÂÖ•‰∏Ä‰∏™Áü©ÂΩ¢ÔºåÂ∞±ÊòØÊï¥‰∏ÄÂùóÁ©∫Èó¥ÈÉΩÂèØ‰ª•ÂìçÂ∫îÁÇπÂáª‰∫ã‰ª∂‰∫Ü„ÄÇ
                        .onTapGesture {
                            guard !isEditing else { return }
                            isShowDetail = true
                        }
                    
                    if isEditing {
                        Image(systemName: "pencil")
                            .font(.title2.bold())
                            .foregroundColor(.accentColor)
                    }
                }
            }
            .listStyle(.plain)
            .padding(.horizontal)
        }
        .background(.sysGb)
        // ÂæÄÂ∫ïÈÉ®ÂÆâÂÖ®Âå∫ÂüüÊîæÂÖ•ViewÔºö
        // ÊîæÂÖ•ÂêéÔºåÂ∫ïÈÉ®ÂÆâÂÖ®Âå∫Âüü += ButtonÁöÑÈ´òÂ∫¶
//        .safeAreaInset(edge: .bottom, alignment: isEditing ? .center : .trailing) {
//            if isEditing {
//                deleteButton
//            } else {
//                addButton
//            }
//        }
        // Áî±‰∫é‰∏§‰∏™ButtonÁöÑÈ´òÂ∫¶‰∏ç‰∏ÄËá¥Ôºå‰ºöÂØºËá¥ÂàáÊç¢Êó∂‰∏äÈù¢ÁöÑËßÜÂõæÂèëÁîüÊäñÂä®Ôºå
        // ‰∏∫‰∫Ü‰øùÊåÅËøô‰∏™Â∫ïÈÉ®È´òÂ∫¶‰∏ÄËá¥ÔºåÈÇ£Â∞±ËÆ©Ëøô‰∏§‰∏™Button‰∏ÄÁõ¥Â≠òÂú®Ôºö
        // Tips: ÊääËøô‰∏§‰∏™Button‰∏ÄËµ∑ÊîæÂà∞ZStack‰∏≠ÔºåZStackÈ´òÂ∫¶Âàô‰ºö„ÄêÂõ∫ÂÆö„ÄëÊòØÈ´òÂ∫¶ÊØîËæÉÂ§ßÁöÑÈÇ£‰∏™Ôºå
        // Âπ∂‰∏îËÉΩËÆæÁΩÆËøô‰∏§‰∏™ButtonÊ∞¥Âπ≥ÂØπÈΩêÔºàalignment: .centerÔºåÈªòËÆ§Â∞±ÊòØÔºâ„ÄÇ
        .safeAreaInset(edge: .bottom, content: buildFloatButton)
        .sheet(isPresented: $isShowDetail) {
            let food = foods.randomElement()!
            
            // ÊòØÂê¶‰ΩøÁî®`VStack`Ôºö
            // ÈªòËÆ§‰ΩøÁî®`HStack`Ôºå
            // ‰ΩÜ„ÄåËæÖÂä©Ê®°ÂºèÔºàÂ§ßÂ≠óÂè∑Ôºâ„ÄçÊàñ„ÄåemojiÊï∞ÈáèÂ§ß‰∫é1„ÄçÁöÑÊÉÖÂÜµ‰∏ãÔºå‰ΩøÁî®`VStack`„ÄÇ
            // Âõ†‰∏∫`HStack`Êîæ‰∏ç‰∏ãÔºå‰ºöË¢´Êå§ÂéãÊàê‰∏§Ë°å„ÄÇ
            let shouldUseVStack = textSize.isAccessibilitySize || food.image.count > 1
            
            // Áõ∏ÂΩì‰∫éÊääAnyLayoutÂΩì‰ΩúVStackÂíåHStackÁöÑÊ≥õÂûãÊù•‰ΩøÁî®
            AnyLayout.userVStack(if: shouldUseVStack, spacing: 30) {
                Text(food.image)
                    .font(.system(size: 100))
                    .lineLimit(1)
                    // ÂΩì„ÄêÊòæÁ§∫ÁöÑÂå∫Âüü„ÄëÂÆπ‰∏ç‰∏ã„ÄêÊñáÊú¨ÂÜÖÂÆπÊâÄÈúÄÂ§ßÂ∞è„ÄëÊó∂Ôºå‰ºöÂØπÊñáÊú¨ÂÜÖÂÆπËøõË°åÁº©ÊîæËá≥ÈÄÇÂΩìÂ§ßÂ∞è
                    .minimumScaleFactor(shouldUseVStack ? 1 : 0.5) // ÊúÄÂ§öËÉΩÁº©Â∞èËá≥ÁôæÂàÜ‰πãÂ§öÂ∞ë
                
                Grid(horizontalSpacing: 30, verticalSpacing: 12) {
                    buildNutritionView(title: "ÁÉ≠Èáè", value: food.$calorie)
                    buildNutritionView(title: "ËõãÁôΩË¥®", value: food.$protein)
                    buildNutritionView(title: "ËÑÇËÇ™", value: food.$fat)
                    buildNutritionView(title: "Á¢≥Ê∞¥", value: food.$carb)
                }
            }
            .padding()
            .padding(.vertical)
            // ËØªÂèñ`overlay`‰∏äÈù¢ËøôÈÉ®ÂàÜÁöÑËßÜÂõæÂ§ßÂ∞è
            .overlay {
                GeometryReader { proxy in
                    //„ÄêÊ≥®ÊÑè„ÄëÔºö‰∏çÂèØ‰ª•Áõ¥Êé•Âú®„ÄêÂ≠êËßÜÂõæÂÜÖÈÉ®„ÄëÂà∑Êñ∞Áà∂ËßÜÂõæÁöÑStateÂ±ûÊÄß
//                    detailHeight = proxy.size.height
                    
                    // `detailHeight`ÊòØÁà∂ËßÜÂõæÁöÑStateÂ±ûÊÄßÔºå
                    // ÊîπÂèòËØ•Â±ûÊÄßÂ∞±‰ºöÂΩ±ÂìçÈáåÈù¢Â≠êËßÜÂõæÁöÑÂ∏ÉÂ±ÄÔºå
                    // ÁÑ∂ÂêéÊ≠§Â§ÑÂ≠êËßÜÂõæÁöÑÂ∏ÉÂ±ÄÂè™Ë¶ÅÂèëÁîüÊîπÂèòÔºåÂèà‰ºöÊîπÂèòËøô‰∏™StateÂ±ûÊÄßÔºå
                    // ‰ªéËÄåÂèà‰ºöËÆ©Áà∂ËßÜÂõæÈáçÂ§çÂéªÊîπÂèòÈáåÈù¢Â≠êËßÜÂõæÁöÑÂ∏ÉÂ±ÄÔºåÂë®ËÄåÂ§çÂßãÔºåÂØºËá¥Ê≠ªÂæ™ÁéØ„ÄÇ
                    // ÂèÇËÄÉÔºöhttps://zhuanlan.zhihu.com/p/447836445
                    
                    // Ëß£ÂÜ≥ÊñπÊ°àÔºö‰ΩøÁî®`PreferenceKey` ---„ÄêËÉΩÂ§üÂú®ËßÜÂõæ‰πãÈó¥‰º†ÈÄíÂÄº„Äë
                    // PSÔºöÈúÄË¶ÅÂú®`GeometryReader`ÈáåÈù¢ÊîæÂÖ•‰∏Ä‰∏™ËßÜÂõæÊâçËÉΩËØªÂèñÂà∞ÂÖ∂ÂùêÊ†áÂèòÂåñÂÄºÔºå
                    // Âõ†Ê≠§Êîæ‰∏Ä‰∏™ÈÄèÊòéÈ¢úËâ≤ÔºåÂêåÊó∂‰πüÂèØ‰ª•Èò≤Ê≠¢ÈÅÆÊå°Âà∞Â∫ï‰∏ãËßÜÂõæ„ÄÇ
                    Color.clear
                        .preference(key: DetailSheetHeightKey.self, // PreferenceKeyÁ±ªÂûã
                                    value: proxy.size.height) // ÁõëÂê¨ÁöÑÂÄº
                }
            }
            .onPreferenceChange(DetailSheetHeightKey.self) {
                detailHeight = $0
            }
            // Ëá™ÂÆö‰πâpresentÂΩ¢ÂºèÔºö
            // .mediumÔºöÂè™Âç†Â±èÂπï‰∏ÄÂçäÈ´òÂ∫¶
            // .height(500)ÔºöÊúÄÂ§ßÈ´òÂ∫¶ÔºàÂ¶ÇÊûúÊØîmediumÂ∞èÔºåÊúÄÂ§ßÈ´òÂ∫¶ÂàôÊòØÂçäÂ±èÔºâ
//            .presentationDetents([.medium, .height(500)])
//            .presentationDetents([.medium])
            .presentationDetents([.height(detailHeight)])
        }
    }
}

private extension FoodListView {
    struct DetailSheetHeightKey: PreferenceKey {
        static var defaultValue: CGFloat = 300
        static func reduce(value: inout CGFloat, nextValue: () -> CGFloat) {
            value = nextValue()
        }
    }
}

private extension FoodListView {
    var titleBar: some View {
        HStack {
            Label("È£üÁâ©Ê∏ÖÂçï", systemImage: "fork.knife")
                .font(.title.bold())
                .foregroundColor(.accentColor)
                .frame(maxWidth: .infinity, alignment: .leading)
            
            EditButton()
                .buttonStyle(.bordered)
//                .environment(\.locale, .init(identifier: "zh-cn")) // ‰ΩøÁî®‰∏≠Êñá
        }
        .padding()
    }
    
    var addButton: some View {
        Button {
            
        } label: {
            Image(systemName: "plus.circle.fill")
                .font(.system(size: 50))
                .padding()
                // ‰ΩøÁî®Ëâ≤ÁõòÊ®°ÂºèÔºöÂèØ‰ª•ËÆæÁΩÆ‰∏ªËâ≤ÂíåÊ¨°Ëâ≤ÔºàÂéª„ÄåSFÂ≠óÁ¨¶„ÄçAppÊü•ÁúãÔºâ
                .symbolRenderingMode(.palette)
                // ‰æùÊ¨°ËÆæÁΩÆËâ≤ÁõòÈ¢úËâ≤Ôºö‰∏ªËâ≤„ÄÅÊ¨°Ëâ≤
                .foregroundStyle(.white, Color.accentColor.gradient)
        }
    }
    
    var deleteButton: some View {
        Button {
            withAnimation {
                foods = foods.filter { !selectedFoods.contains($0.id) }
            }
        } label: {
            Text("Âà†Èô§Â∑≤ÈÄâÈ°πÁõÆ")
                .font(.title2.bold())
                .frame(maxWidth: .infinity, alignment: .center)
        }
        .mainButtonStyle(shape: .roundedRectangle(radius: 8))
        .padding(.horizontal, 50)
    }
    
    func buildFloatButton() -> some View {
        ZStack {
            deleteButton
                .opacity(isEditing ? 1 : 0)
                // Ëá™ÂÆö‰ºöËΩ¨Âú∫ÊïàÊûú
                .transition(
                    .move(edge: .leading) // ‰ªéÂ∑¶‰æßËøõÂú∫
                    .combined(with: .opacity) // ÈÄèÊòéÊ∏êÂèò
                    .animation(.easeInOut)
                )
                .id(isEditing)
            
            addButton
                .opacity(isEditing ? 0 : 1)
                .scaleEffect(isEditing ? 0.3 : 1)
                .animation(.easeInOut, value: isEditing)
                // ÊúÄÂêéÂÜçËÆæÁΩÆframeÊòØ‰∏∫‰∫ÜËÆ©Âä®ÁîªÂè™ÂΩ±ÂìçaddButtonÔºà‰ª•‰∏äÁöÑÈÉ®ÂàÜÔºâÔºåÂê¶ÂàôÊòØÊï¥‰∏™Âå∫ÂüüÈÉΩ‰ºöÁº©Êîæ
                .frame(maxWidth: .infinity, alignment: .trailing)
        }
    }
    
    func buildNutritionView(title: String, value: String) -> some View {
        GridRow {
            Text(title)
                .gridCellAnchor(.leading)
            Text(value)
                .gridCellAnchor(.trailing)
        }
    }
}

struct FoodList_Previews: PreviewProvider {
    static var previews: some View {
        FoodListView()
    }
}
